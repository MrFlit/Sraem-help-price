import asyncio
import aiohttp
import re
import os
import sys
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from config import TOKEN, ADMIN_ID, SUPPORT_CHAT_ID
from keyboards import main_keyboard, get_price_button, get_remove_game_keyboard, get_currency_keyboard
from collections import Counter
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_games = {}
# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–∂–∏–¥–∞–µ—Ç –ª–∏ –æ–Ω –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏)
user_states = {}
# –•—Ä–∞–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
support_messages = []
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = {}

async def set_bot_commands():
    commands = [
        types.BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="/restart", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    ]
    await bot.set_my_commands(commands)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await set_bot_commands()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await dp.start_polling(bot)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
async def get_admin_report():
    total_users = len(user_games)
    total_games = sum(len(games) for games in user_games.values())
    most_added_games = Counter(game for games in user_games.values() for game in games).most_common(5)

    report = (
        f"üìù *–û—Ç—á–µ—Ç –ø–æ –±–æ—Ç—É*\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üéÆ –ò–≥—Ä –≤ —Å–∏—Å—Ç–µ–º–µ: {total_games}\n"
        f"üì© –°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {len(support_messages)}\n"
        f"\nüî• *–ß–∞—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã–µ –∏–≥—Ä—ã:*"
    )
    for game, count in most_added_games:
        game_name, _, _, _ = await get_price(game)
        report += f"\n{game_name} - {count} —Ä–∞–∑(–∞)"
    return report

# –ö–æ–º–∞–Ω–¥–∞ /report –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(F.text == "/report")
async def report(message: Message):
    if message.from_user.id != ADMIN_ID:
        return  # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    report = await get_admin_report()
    await message.answer(report, parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ Steam Store API
async def get_price(appid, user_id):
    currencies = user_settings.get(user_id, {"RU", "KZ"})  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é RU –∏ KZ
    price_data = {}
    discount_data = {}  # –°–ª–æ–≤–∞—Ä—å —Å–∫–∏–¥–æ–∫ –ø–æ –≤–∞–ª—é—Ç–∞–º

    async with aiohttp.ClientSession() as session:
        for currency in currencies:
            url = f"https://store.steampowered.com/api/appdetails?appids={appid}&cc={currency.lower()}"
            async with session.get(url) as resp:
                data = await resp.json()

            if str(appid) in data and data[str(appid)].get("success", False):
                game_data = data[str(appid)]["data"]
                price_overview = game_data.get("price_overview", {})

                price = price_overview.get("final", 0) / 100
                discount = price_overview.get("discount_percent", 0)

                price_data[currency] = price
                discount_data[currency] = discount  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∏–¥–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã

    game_name = data[str(appid)]["data"].get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞") if data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞"
    return game_name, price_data, discount_data




url_pattern = r"https://store\.steampowered\.com/app/(\d+)"

@dp.message(F.text == "/start")
async def start(message: Message):
    user_games[message.from_user.id] = user_games.get(message.from_user.id, [])
    user_states.pop(message.from_user.id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–î–æ–±–∞–≤—å –∏–≥—Ä—É –ø–æ –µ—ë AppID –∏–ª–∏ —Å—Å—ã–ª–∫–µ Steam –∏ –ø—Ä–æ–≤–µ—Ä—è–π —Ü–µ–Ω—ã.", reply_markup=main_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ /restart –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
@dp.message(F.text == "/restart")
async def restart(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    # if message.from_user.id != ADMIN_ID:
    #     return  # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    await message.answer("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
    os.execl(sys.executable, sys.executable, *sys.argv)

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ò–≥—Ä—É")
async def add_game_prompt(message: Message):
    user_states[message.from_user.id] = "waiting_for_game_id"
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ AppID –∏–≥—Ä—ã –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Steam, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É.")

@dp.message(F.text.regexp(r"^\d+$"))
async def add_game_by_id(message: Message):
    user_id = message.from_user.id
    if user_states.get(user_id) != "waiting_for_game_id":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –±–æ—Ç –µ–≥–æ –Ω–µ –∂–¥–∞–ª

    appid = int(message.text)
    user_games.setdefault(user_id, [])

    if appid in user_games[user_id]:
        await message.answer("–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        user_games[user_id].append(appid)
        await message.answer("–ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard())
    user_states.pop(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@dp.message(F.text.regexp(url_pattern))
async def add_game_by_url(message: Message):
    user_id = message.from_user.id
    if user_states.get(user_id) != "waiting_for_game_id":
        return

    match = re.match(url_pattern, message.text)
    if match:
        appid = int(match.group(1))
        user_games.setdefault(user_id, [])

        if appid in user_games[user_id]:
            await message.answer("–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            user_games[user_id].append(appid)
            await message.answer("–ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard())
    user_states.pop(user_id, None)

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ò–≥—Ä—É")
async def remove_game_prompt(message: Message):
    user_id = message.from_user.id
    user_states.pop(user_id, None)
    if not user_games.get(user_id, []):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä.")
        return

    keyboard = get_remove_game_keyboard(user_games[user_id])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("remove_game_"))
async def remove_game(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    game_id = int(callback.data.split("_")[2])  # –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä—ã

    if user_id in user_games and game_id in user_games[user_id]:
        user_games[user_id].remove(game_id)
        await callback.answer("‚úÖ –ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        if user_games[user_id]:
            keyboard = get_remove_game_keyboard(user_games[user_id])
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        else:
            await callback.message.edit_text("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä.")
    else:
        await callback.answer("‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

@dp.message(F.text == "üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã")
async def check_prices(message: Message):
    user_id = message.from_user.id

    if not user_games.get(user_id, []):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä.")
        return

    response = "üí∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≤–∞—à–∏ –∏–≥—Ä—ã:*\n"
    currency_flags = {
        "RU": "üá∑üá∫", "KZ": "üá∞üáø",
        "UA": "üá∫üá¶", "CN": "üá®üá≥",
        "EU": "üá™üá∫", "US": "üá∫üá∏",
        "PL": "üáµüá±"
    }

    for appid in user_games[user_id]:
        game_name, price_data, discount_data = await get_price(appid, user_id)
        discount_text = None  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∫–∏–¥–∫—É

        response += f"\nüéÆ {game_name}\n\n"

        if price_data:
            for currency, price in price_data.items():
                flag = currency_flags.get(currency, "")
                response += f"{flag} {price:.2f} {currency}\n"

                # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å–∫–∏–¥–∫—É (–≤—Å–µ —Å–∫–∏–¥–∫–∏ –æ–±—ã—á–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
                if discount_text is None and currency in discount_data:
                    discount = discount_data[currency]
                    discount_text = f"üí∞ –°–∫–∏–¥–∫–∞: {discount}%" if discount else "üí∞ –°–∫–∏–¥–∫–∞: 0%"

            if discount_text:
                response += f"\n{discount_text}\n"  # –°—Ç–∞–≤–∏–º —Å–∫–∏–¥–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ü–µ–Ω

        else:
            response += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É\n"

    await message.answer(response, parse_mode="Markdown", reply_markup=get_price_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã"
@dp.callback_query(F.data == "check_prices")
async def refresh_prices(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    if not user_games.get(user_id, []):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä.", show_alert=True)
        return

    response = "üí∞ *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≤–∞—à–∏ –∏–≥—Ä—ã:*\n"
    currency_flags = {
        "RU": "üá∑üá∫", "KZ": "üá∞üáø",
        "UA": "üá∫üá¶", "CN": "üá®üá≥",
        "EU": "üá™üá∫", "US": "üá∫üá∏",
        "PL": "üáµüá±"
    }

    for appid in user_games[user_id]:
        game_name, price_data, discount_data = await get_price(appid, user_id)
        discount_text = None  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∫–∏–¥–∫—É

        response += f"\nüéÆ *{game_name}*\n"

        if price_data:
            for currency, price in price_data.items():
                flag = currency_flags.get(currency, "")
                response += f"{flag} {price:.2f} {currency}\n"

                # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å–∫–∏–¥–∫—É (–≤—Å–µ —Å–∫–∏–¥–∫–∏ –æ–±—ã—á–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
                if discount_text is None and currency in discount_data:
                    discount = discount_data[currency]
                    discount_text = f"üí∞ –°–∫–∏–¥–∫–∞: {discount}%" if discount else "üí∞ –°–∫–∏–¥–∫–∞: 0%"

            if discount_text:
                response += f"{discount_text}\n"  # –°—Ç–∞–≤–∏–º —Å–∫–∏–¥–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ü–µ–Ω

        else:
            response += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É\n"

    new_text = response.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback.message.text.strip() != new_text:
        await callback.message.edit_text(new_text, reply_markup=get_price_button())
        await callback.answer("–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ", show_alert=True)
    else:
        await callback.answer("–¶–µ–Ω—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚úÖ", show_alert=True)



@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    games_list = user_games.get(user_id, [])

    response = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"

    if not games_list:
        response += "–ü—É—Å—Ç–æ! \n–î–æ–±–∞–≤—å –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª.\n"
    else:
        response += "–í–∞—à–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã:\n"
        for game_id in games_list:
            game_name, _, _ = await get_price(game_id, user_id)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É
            response += f"üéÆ {game_name}\n"
    await message.answer(response, reply_markup=main_keyboard())

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_start(message: Message):
    user_states[message.from_user.id] = "waiting_for_support_message"
    await message.answer("üÜò –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª—é—Ç")
async def settings(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω:\n              ‚ö†Ô∏è–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è-–±—ã 1‚ö†Ô∏è\n", reply_markup=get_currency_keyboard(message.from_user.id, user_settings))

@dp.callback_query(F.data.startswith("currency_"))
async def change_currency(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    currency = callback.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–∞–ª—é—Ç—ã

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_settings:
        user_settings[user_id] = {"RU", "KZ"}  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é RU –∏ KZ

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞–ª—é—Ç—ã (–≤–∫–ª/–≤—ã–∫–ª)
    if currency in user_settings[user_id]:
        user_settings[user_id].remove(currency)
    else:
        user_settings[user_id].add(currency)

    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ", show_alert=True)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω:", reply_markup=get_currency_keyboard(user_id))

@dp.callback_query(F.data.startswith("toggle_currency_"))
async def toggle_currency(call: types.CallbackQuery):
    user_id = call.from_user.id
    currency_code = call.data.split("_")[-1]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "RU", "KZ")

    if user_id not in user_settings:
        user_settings[user_id] = {"RU", "KZ"}  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if currency_code in user_settings[user_id]:
        user_settings[user_id].remove(currency_code)
    else:
        user_settings[user_id].add(currency_code)

    await call.message.edit_reply_markup(reply_markup=get_currency_keyboard(user_id, user_settings))
    await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@dp.message(F.text == "üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏—è")
async def show_updates(message: Message):
    updates_text = (
        "üÜï *–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –±–æ—Ç–µ?*\n\n"
        "‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–≥—Ä—ã –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ AppID, –Ω–æ –∏ –ø–æ —Å—Å—ã–ª–∫–µ!\n"
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Ü–µ–Ω.\n"
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è', —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è–º–∏.\n"
        "‚úÖ –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∏ —Å–∫–∏–¥–æ–∫.\n"
        "‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.\n"
        "\nüî• –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    )
    await message.answer(updates_text, parse_mode="Markdown")







@dp.callback_query(F.data.startswith("toggle_currency_"))
async def toggle_currency(call: types.CallbackQuery):
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {call.data}")

@dp.message()
async def handle_unexpected_messages(message: Message):
    user_id = message.from_user.id

    if user_states.get(user_id) == "waiting_for_support_message":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        support_message = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {message.from_user.full_name} (@{message.from_user.username}):\n\n{message.text}"
        support_messages.append(support_message)
        await bot.send_message(SUPPORT_CHAT_ID, support_message)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        user_states.pop(user_id, None)
        return

    # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")
    await message.delete()
if __name__ == "__main__":
    asyncio.run(main())